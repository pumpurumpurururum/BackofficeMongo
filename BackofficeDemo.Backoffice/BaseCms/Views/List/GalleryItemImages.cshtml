@using System.Reflection
@using System.Text
@using BaseCms.Common.Attributes
@using BaseCms.Views.List
@model BaseCms.Model.DataWithIdentifier<object,string>
@{
    var guide = Guid.NewGuid();
    
    var metaData = new DefaultListMetadataProvider().GetMetadata(Model.Type);

    var initSortIndex = 0;
    var initSortDir = "asc";

    var activeElements = metaData.Items.Where(w => !w.IsHidden).OrderBy(p => p.Order).ToList();

    var initSortableItem = activeElements.FirstOrDefault(i => i.InitSort);
    if (initSortableItem != null)
    {
        initSortIndex = activeElements.IndexOf(initSortableItem);
        initSortDir = initSortableItem.InitSortDir;
    }

    var noSortColumnIndexesStr = new StringBuilder();
    noSortColumnIndexesStr.Append(0);

    var mRenderDictionary = new Dictionary<string, StringBuilder>();
    var sWidthDictionary = new Dictionary<int, StringBuilder>();
    var sClassDictionary = new Dictionary<string, StringBuilder> { { "center", new StringBuilder() } };
    sClassDictionary["center"].Append("0,");
    for (var i = 0; i < activeElements.Count; i++)
    {
        var template = activeElements[i].Template;
        if (!String.IsNullOrEmpty(template))
        {
            if (!mRenderDictionary.ContainsKey(template))
            {
                mRenderDictionary.Add(template, new StringBuilder());
            }

            mRenderDictionary[template].AppendFormat("{0},", i);
        }
        
        if ((i > 0) && (activeElements[i].NoSort))
        {
            noSortColumnIndexesStr.AppendFormat(",{0}", i);    
        }

        var columnClass = activeElements[i].ColumnClass;
        if (!String.IsNullOrEmpty(columnClass))
        {
            if (!sClassDictionary.ContainsKey(columnClass))
            {
                sClassDictionary.Add(columnClass, new StringBuilder());
            }

            sClassDictionary[columnClass].AppendFormat("{0},", i);
        }
        
        if (activeElements[i].Width.HasValue)
        {
            var width = activeElements[i].Width.Value;
            if (!sWidthDictionary.ContainsKey(width))
            {
                sWidthDictionary.Add(width, new StringBuilder());
            }

            sWidthDictionary[width].AppendFormat("{0},", i);
        }
    }

    var cmsMetadataAttribute = Model.Type.GetCustomAttribute<CmsMetadataTypeAttribute>(true);
}

<div class="page-header position-relative">
    <h1>
        @(cmsMetadataAttribute == null ? Model.Type.Name : cmsMetadataAttribute.CollectionTitlePlural)
    </h1>
</div>

<div id="filter"></div>

<table id="list_CMSScopeName_" class="scroll" cellpadding="0" cellspacing="0"></table>
<div id="pager_CMSScopeName_" class="scroll" style="text-align:center;"></div>

<table class="table table-striped table-bordered table-hover dataTable" id="table_CMSScopeName_" style="clear: both;">
    <thead>
        <tr>
            <th>
                <input type="checkbox" class="ace"><span class="lbl"></span>
            </th>
            @foreach (var column in activeElements.Skip(1).OrderBy(p => p.Order))
            {
                <th>@column.Display</th>
            }
        </tr>
    </thead>
    <tbody></tbody>
</table>

<div id="menu"></div>

<script>
    var oTable__CMSScopeName_ = undefined;
    $(document).ready(function () {
        oTable__CMSScopeName_ = $("#table_CMSScopeName_").dataTable({
            "bProcessing": true,
            "bServerSide": true,
            "sAjaxSource": "@Html.Raw(Model.Url)",
            "sDom": "tr<'row'<'col-md-4'l><'col-md-4'i><'col-md-4'p>>",
            "aoColumnDefs": [
                {
                    "fnRender": function(data) {
                        return '<input type="checkbox" class="ace" value="' + data.aData[0] + '"><span class="lbl"></span>';
                    },
                    "aTargets": [0],
                },
                @foreach (var sClassDescription in sClassDictionary)
                {
                    <text>
                            {
                                "sClass": "@(sClassDescription.Key)",
                                "aTargets": [@sClassDescription.Value.ToString()]
                            },
                    </text>
                }
                { "bSortable": false, "aTargets": [@noSortColumnIndexesStr.ToString()], },
                @foreach (var mRenderDescription in mRenderDictionary)
                {
                    <text>
                        {
                            "mRender":
                                function (data, type, row) {
                                    @Html.Partial("DataTablesTemplates/" + mRenderDescription.Key)
                                },
                            "aTargets": [@mRenderDescription.Value.ToString()]
                        },
                    </text>
                }
                { "sWidth": "30px", "aTargets": [0] },
                @foreach (var sWidthDescription in sWidthDictionary)
                {
                    <text>
                        {
                            "sWidth": "@(sWidthDescription.Key.ToString())px",
                            "aTargets": [@sWidthDescription.Value.ToString()]
                        },
                    </text>
                }
            ],
            "aaSorting": [[@(initSortIndex), "@(initSortDir)"]],
            "fnServerData": function(sSource, aoData, fnCallback) {
                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": fnCallback,
                    "error": function(xhr, textStatus, error) {
                        if ((xhr != null) && (xhr.responseText == 'timeout')) {
                            window.location.href = '/login/?ReturnUrl=%2f';
                            return;
                        }
                        oTable__CMSScopeName_.fnProcessingIndicator(false);
                        bootbox.alert('Ошибка сервера. Перезагрузите страницу.');
                    }
                });
            },
            "fnPreDrawCallback": function (oSettings) {
                // create a thumbs container if it doesn't exist. put it in the dataTables_scrollbody div
                if ($('#thumbs_container').length < 1) $('#table_CMSScopeName_').parent().append("<div id='thumbs_container' class='ace-thumbnails clearfix'></div>");

                // clear out the thumbs container
                $('#thumbs_container').html('');
                $('#table_CMSScopeName_').hide();
                return true;
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //console.log(aData);
                var data = aData;
                $('#thumbs_container').append('<li>' +
                        '<div>' +
                        '<img width="150" height="150" alt="150x150" src="' + data[2] + '">' +
                        '<div class="text">' +
                        '<div class="inner">' +
                        '<span>Some Title!</span>' +
                        '<br>' +
                        '<a href="' + data[2] + '" data-rel="colorbox" class="cboxElement">' +
                        '<i class="ace-icon fa fa-search-plus"></i>' +
                        '</a><a data-id="' + data[1] + '" class="img_edit" href="#">' +
                        '<i class="ace-icon fa fa-share"></i></a></div></div></div></li>');
                
                return nRow;

            },
            "fnInitComplete": function () {
                $("#thumbs_container li a.img_edit").click(function (event) {

                    event.preventDefault();
                    var id = $(this).attr("data-id");
                    _CMSScope_.open(id, new CMSViews.Detail(_CMSScope_._collectionName, id + "", new CMSViews.DetailEditState()));
                });
                return true;
            }
        });

        _CMSScope_.assignGrid(oTable__CMSScopeName_);
    });
</script>